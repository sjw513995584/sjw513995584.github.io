---
layout: default
img: phones.png
category: Services
title: Google Web Fonts and<br>Font Awesome Icons
description: |
---
# Git - 版本控制工具

## <!--more-->版本控制系统

> 版本控制是一种记录若干文件内容变化，以便将来查阅特定版本修订情况的系统。

### 开发场景和问题再现

- 问题1：改变代码，意识到这是一个错误，想要恢复？
- 问题2：要维护产品的多个版本？
- 问题3：想看看做了多少工作，在哪里，何时和由谁？
- 问题4：两个开发人员同时要改变同一个文件，改写彼此的工作？
- 问题5：多人开发如何同步代码？
- 问题6：想要看到两个(或更多)版本的代码之间的区别？

### 版本控制系统的作用

- 使用版本控制系统以上问题迎刃而解

使用了版本控制系统，每一个团队成员都可以在任何时间对任何文件毫无顾虑的进行修改，版本控制系统可以把之后所有的改动合并成一个共同的版本，不论是一个文件还是整个项目。这个共同的中心平台就是我们的版本控制系统。

### 三种版本控制系统

- 1 本地版本控制系统
- 2 集中式版本控制系统 
- 3 分布式版本控制系统 

### 本地版本控制系统

- 复制整个项目目录的方式来保存不同的版本，或许还会改名加上备份时间以示区别
- 缺点：手动维护困难、无法多人维护

### 集中式版本控制系统

- 工具：`SVN`、CVS、Subversion、Perforce 等
- 特点：使用单一的集中管理的服务器，保存所有文件的修订版本，而协同工作的人们都通过客户端
  连到这台服务器，取出最新的文件或者提交更新
- 缺点：
  - 1：需要一台中央服务器
  - 2：中央服务器的单点故障，故障期间无法协同工作
  - 3：中心数据库所在的磁盘发生损坏，如果没有备份，会造成数据丢失
  - 4：依赖于网络

### 分布式版本控制系统

- 工具：**Git**、Mercurial、Bazaar 以及 Darcs 等
- 特点：每个客户端都有一份代码仓库完整地镜像（副本）

## Git简介

- [官网](https://git-scm.com)
- [文档](https://git-scm.com/book/zh/v2)

### 什么是Git

```
Git是一款免费、开源的分布式 `版本控制软件` （VCS - Version Control System）
由 Linus Torvalds（林纳斯·托瓦兹）于2005年发布
最初目的是为更好地管理 Linux内核 开发而设计

Git使用方式：1 命令 、2 图形化界面（GUI）
```

### Git的优势

- 1 速度快，非常快，及其快
- 2 简单（不同命令，完成不同功能）
- 3 对非线性开发模式的强力支持（允许成千上万个并行开发的分支）
- 4 完全分布式，不需要中央服务器就可以运行
- 5 有效、高速、高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）
- 6 Git中绝大多数的任务都是在本地完成的
- 7 使得源代码的发布和交流极其方便

## Git的基本使用

- 安装：[Git 下载地址](https://git-scm.com/downloads)
- 查看版本：`git --version`
- 查看帮助：`git --help`
- 查看命令帮助：`git add -h`
- 查看详细帮助：`git add --help`

### 基础配置

- 作用：每次 Git 提交时都会引用这两条信息，记录是谁提交了更新
- 配置用户名：   `git config --global user.name "用户名"`
- 配置邮箱：     `git config --global user.email "邮箱地址"`
- 查看配置信息： `git config --list`
- `--global`全局配置的说明：
  - 添加`--global`参数后，对电脑中任何位置的git仓库都有效
  - 没有添加`--global`参数，只对当前仓库有效

### 使用流程

- 1 初始化仓库
- 2 暂存文件
- 3 提交

### 初始化仓库

- 命令：`git init`
- 作用：使用Git管理项目的初始化操作，会创建一个名为`.git`的隐藏目录
- `.git`目录（不要修改这个文件）

```
这个目录含有你初始化的 Git 仓库中所有的必须文件，这些文件是Git 仓库的骨干。

它是 Git 用来保存元数据和对象数据库的地方。
该目录非常重要，每次克隆镜像仓库的时候，实际拷贝的就是这个目录里面的数据。
```

### 暂存文件

- 作用：将文件由 工作区 添加到 暂存区（Index），暂存文件
- 命令：`git add 文件路径`
  - 例如： `git add ./README.md`
- `git add --all` 或者 `git add -A`（简写） 添加所有文件
- `git add a.txt b.txt` 同时添加两个文件
- `git add *.js` 添加当前目录下的所有js文件

### 提交更新

- 作用：将文件由 暂存区 添加到 仓库（HEAD）

- `git commit -m '提交说明'`

  ​

- 误删文件,如何恢复

  - git checkout -- 文件名
  - 确定要删除这个文件  git commit -m 描述信息

### 查看文件状态

- 命令：`git status`
- 命令：`git stauts -s` 简化日志输出格式
  - `??` 表示未追踪的文件
  - `A`  表示已经添加暂存区的文件
  - `M`  表示修改过的文件
    - 右边的M: 表示该文件被修改了但是还没放入暂存区
    - 左边的M: 表示该文件被修改了并放入了暂存区

## Git三种状态和分区

![git状态](./img/areas.png)

> Woriking Directory: 工作区
> Staging area: 暂存区
> .git directory(repository): Git仓库

### 三个存储分区的说明

```
1 工作区：开发者的工作目录
2 暂存区：临时存放工作目录中变更的文件
3 仓库  ：存储提交之后的文件目录

Git仓库目录：是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。

工作目录：是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。

暂存区域：是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。有时候也被称作 index，不过一般说法还是叫暂存区域
```

### GIT中文件的四种状态

```
未追踪(untracked) / 已修改（modified）=> 已暂存（staged）=> 已提交（committed）

未追踪: 表示文件还没有被git管理起来
已修改：表示修改了某个文件，但还没有提交保存
已暂存：表示把已修改的文件放在下次提交时要保存的清单中
已提交：表示该文件已经被安全地保存在本地git仓库中了
```

### Git工作流程

![文件状态变化周期](./img/lifecycle.png)

- `Untracked`：  未追踪，文件还没有被git管理（尚未add）
- `Staged`：     已暂存，文件已添加到暂存区（git add）
- `Unmodified`： 未修改，文件提交到仓库区（git commit -m）
- `Modified`：   已修改，仓库区的文件再次被修改

```
1 在工作目录中修改某些文件。
2 对修改后的文件进行快照，然后保存到暂存区域。
3 提交更新，将保存在暂存区域的文件快照永久转储到.git目录中。
```

### 查看提交日志

- 命令：`git log` 查看详细的提交信息
- 命令：`git reflog` 查看所有提交变更操作

### 版本回退

- 作用：恢复到已经提交的某一个版本中
- 命令：`git reset --hard [版本号]`
  - 作用：回退到指定的版本号

### 忽略文件

- 作用：忽略一些不需要被git管理的文件
- 一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。!!!
- [git忽略文件-详细参考](https://github.com/github/gitignore)

```
1 在与 .git 隐藏目录同级的目录中创建 `.gitignore` 文件
2 打开 .gitignore 文件，加入忽略文件，例如：/test.html
3 路径是相对于当前 .gitignore文件 的路径

路径写法：
/css/a.css
/css/*.css
/a.html
```

### 忽略文件的说明

- 1 使用 `#` 表示注释，例如：`# 这是注释内容`
- 2 使用 `*` 表示通配符，匹配所有文件，例如：`/css/*.css`

## 分支

> 几乎所有的版本控制系统都以某种形式支持分支。  使用分支意味着你可以把你的工作从开发主线上分离开来，以免影响开发主线。 在很多版本控制系统中，这是一个略微低效的过程——常常需要完全创建一个源代码目录的副本。对于大项目来说，这样的过程会耗费很多时间。

- 场景：正在为了完成任务而撸码中，突然接到电话：有一个严重的bug需要修改，此时，我们应该怎么做？

### 分支操作

- 查看分支：`git branch`，当前分支会标有一个`*`
- 创建分支：`git branch [分支名称]`
  - 分支中的代码，与创建那一刻主分支中的内容完全相同
- 切换分支：`git checkout [分支名称]`
  - 切换分支之前, 必须在当前分支中完成所有的提交了
- (简写)创建并切换分支：`git checkout -b [分支名称]`
- 合并分支：`git merge [分支名称]`，即：将其他分支合并到当前分支
- 删除分支：`git branch -d [分支名称]`

### 合并分支冲突

- 注意：合并分支时出现冲突只能手动处理文件，然后，再次提交

```
如果在一个从分支中做了修改，然后，在主分支中也做了修改。
此时，将这个从分支合并到主分支的时候，就会出现合并冲突的问题！


在两个分支中同时修改了一个文件中的内容，此时，就会造成合并分支冲突
，如果发生了合并冲突，需要我们手动解决！

1 决定保留哪个分支中的内容
2 重新提交


操作：将 hotfix 分支，合并到cart分支中

HEAD：表示当前分支
hotfix： 表示被合并分支

 <<<<<<< HEAD
        <span>第三次修改的内容</span>

        <cart>这是在 cart 分支中提交的内容</cart>
 =======
        <span>第三次修改的内容 --- hotfix 修改bug</span>
 >>>>>>> hotfix
```

### 分支的说明

- 1 公司开发的项目都是由多个分支组成：主分支 + dev分支
- 2 项目经理新建项目仓库，所有的程序员都从这个仓库中获取代码，完成开发任务
- 3 项目经理：搭建设计仓库，创建master分支，以及dev分支（以及 debug分支等）
- 4 所有的程序员在 dev分支 上进行开发，并且还有自己维护的分支
- 5 程序员在分支上完成开发任务后，会提交合并请求
- 6 项目经理安排测试，如果没有问题了，最后才会与 master 分支合并

## github 介绍

- [github 官网](https://github.com/)
- [开源中国-Git](https://git.oschina.net/)

```
在 GitHub 上免费托管的 Git 仓库，任何人都可以看到喔（但只有你自己才能改）。
所以，不要把敏感信息放进去。
```

### github与git

- git 是一个版本控制工具
- github就是一个网站(软件项目平台)，这个网站提供了 git 服务器的功能，我们可以使用git命令来操作托管的项目

## 远程仓库操作

### 将代码提交到远程仓库（HTTPS）

- 1 在本地创建仓库
  - `git init`
  - `git config`
- 2 新建 README.md 文件，并输入任意内容
- 3 将 README.md 提交到本地
  - `git add`
  - `git commit`
- 4 在github中新建仓库，并拿到仓库地址
- 5 使用命令 `git push [仓库地址] master` 提交内容到github的默认分支
- 6 刷新github仓库页面，在线修改 README.md 文件，并提交
- 7 使用命令 `git pull [仓库地址] master` 获取仓库中的最新内容

### 获取远程仓库内容

- 命令：`git pull [仓库地址] [分支名称]` 获取远程仓库最新内容
- 命令：`git clone [仓库地址] [自定义本地仓库名]` 将整个仓库克隆到本地
  - 实例：`git clone git://github.com/jquery/jquery.git myJQ`
- 当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来
- [git clone分支说明](http://blog.csdn.net/yuanchao99/article/details/39118439)



### 注意:

- 从远程仓库拿代码先获取再提交，即：先`pull`再`push`

  ​

  ​



## Git软件（GUI 图形化界面）

- SourceTree / TortoiseGit
- [TortoiseGit使用教程](http://backlogtool.com/git-guide/cn/)

## Git -其他操作

### 文件对比

- 命令：`git diff`：将工作区与暂存区或者仓库对比
- 说明：如果暂存区没有文件，就会将工作区代码与上一次提交对比
  - 1 工作区 与 暂存区对比
  - 2 工作区 与 仓库  对比
- 命令：`git diff --staged`：将当前暂存区与仓库对比
- 命令：`git diff [版本号1] [版本号2] [对比的文件路径]`
  - 对比仓库区两次提交的差异

### 撤销和删除

- `git reset HEAD 文件名` 从暂存区撤销（结果：变为未 add 状态）
- `git checkout -- test.txt` 撤销文件变化
  - 一种是 readme.txt 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
  - 一种是 readme.txt 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
- `git rm [文件名称]`：从工作目录和暂存区中删除文件（物理删除）
- `git rm --cached [文件名称]`：从仓库或暂存区删除文件

### .git目录结构介绍

```
hooks/：      包含客户端或服务端的钩子脚本（hook scripts）
info/：       包含一个全局性排除（global exclude）文件，用以放置那些不希望被记录在.gitignore文件中的忽略模式（ignored patterns）

objects/：    存储所有数据内容
refs/：       存储指向数据（分支）的提交对象的指针

config：      存放项目特有的配置选项
description： 文件仅供 GitWeb 程序使用，我们无需关心
HEAD：        文件保存暂存区信息，一般指向refs下的某文件
```

------

